// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter/material.dart' show debugPrint;
import 'package:savekart/domain/address_data_entity.dart';
import 'package:savekart/domain/app_version_entity.dart';
import 'package:savekart/domain/brand_entity.dart';
import 'package:savekart/domain/cart_banners_entity.dart';
import 'package:savekart/domain/cart_data_exist_entity.dart';
import 'package:savekart/domain/cart_products_entity.dart';
import 'package:savekart/domain/category_entity.dart';
import 'package:savekart/domain/country_list_entity.dart';
import 'package:savekart/domain/order_details_entity.dart';
import 'package:savekart/domain/order_entity.dart';
import 'package:savekart/domain/order_item_by_i_d_entity.dart';
import 'package:savekart/domain/product_by_category_entity.dart';
import 'package:savekart/domain/product_count_entity.dart';
import 'package:savekart/domain/product_stock_entity.dart';
import 'package:savekart/domain/products_entity.dart';
import 'package:savekart/domain/profile_data_entity.dart';
import 'package:savekart/domain/return_policy_entity.dart';
import 'package:savekart/domain/return_request_entity.dart';
import 'package:savekart/domain/searched_products_entity.dart';
import 'package:savekart/domain/state_list_entity.dart';
import 'package:savekart/domain/sub_category_entity.dart';
import 'package:savekart/domain/token_data_entity.dart';
import 'package:savekart/domain/user_address_data_entity.dart';
import 'package:savekart/domain/user_address_entity.dart';
import 'package:savekart/domain/user_entity.dart';
import 'package:savekart/domain/wallet_balance_entity.dart';
import 'package:savekart/domain/wallet_points_entity.dart';
import 'package:savekart/domain/wallet_transaction_entity.dart';
import 'package:savekart/domain/wish_list_product_entity.dart';
import 'package:savekart/domain/wishlistcheck_entity.dart';

JsonConvert jsonConvert = JsonConvert();

typedef JsonConvertFunction<T> = T Function(Map<String, dynamic> json);
typedef EnumConvertFunction<T> = T Function(String value);
typedef ConvertExceptionHandler = void Function(Object error, StackTrace stackTrace);
extension MapSafeExt<K, V> on Map<K, V> {
  T? getOrNull<T>(K? key) {
    if (!containsKey(key) || key == null) {
      return null;
    } else {
      return this[key] as T?;
    }
  }
}

class JsonConvert {
  static ConvertExceptionHandler? onError;
  JsonConvertClassCollection convertFuncMap = JsonConvertClassCollection();

  /// When you are in the development, to generate a new model class, hot-reload doesn't find new generation model class, you can build on MaterialApp method called jsonConvert. ReassembleConvertFuncMap (); This method only works in a development environment
  /// https://flutter.cn/docs/development/tools/hot-reload
  /// class MyApp extends StatelessWidget {
  ///    const MyApp({Key? key})
  ///        : super(key: key);
  ///
  ///    @override
  ///    Widget build(BuildContext context) {
  ///      jsonConvert.reassembleConvertFuncMap();
  ///      return MaterialApp();
  ///    }
  /// }
  void reassembleConvertFuncMap() {
    bool isReleaseMode = const bool.fromEnvironment('dart.vm.product');
    if (!isReleaseMode) {
      convertFuncMap = JsonConvertClassCollection();
    }
  }

  T? convert<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    if (value is T) {
      return value;
    }
    try {
      return _asT<T>(value, enumConvert: enumConvert);
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return null;
    }
  }

  List<T?>? convertList<T>(List<dynamic>? value,
      {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => _asT<T>(e, enumConvert: enumConvert))
          .toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>).map((dynamic e) =>
      _asT<T>(e, enumConvert: enumConvert)!).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  T? _asT<T extends Object?>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    final String type = T.toString();
    final String valueS = value.toString();
    if (enumConvert != null) {
      return enumConvert(valueS) as T;
    } else if (type == "String") {
      return valueS as T;
    } else if (type == "int") {
      final int? intValue = int.tryParse(valueS);
      if (intValue == null) {
        return double.tryParse(valueS)?.toInt() as T?;
      } else {
        return intValue as T;
      }
    } else if (type == "double") {
      return double.parse(valueS) as T;
    } else if (type == "DateTime") {
      return DateTime.parse(valueS) as T;
    } else if (type == "bool") {
      if (valueS == '0' || valueS == '1') {
        return (valueS == '1') as T;
      }
      return (valueS == 'true') as T;
    } else if (type == "Map" || type.startsWith("Map<")) {
      return value as T;
    } else {
      if (convertFuncMap.containsKey(type)) {
        if (value == null) {
          return null;
        }
        return convertFuncMap[type]!(value as Map<String, dynamic>) as T;
      } else {
        throw UnimplementedError(
            '$type unimplemented,you can try running the app again');
      }
    }
  }

  //list is returned by type
  static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
    if (<AddressDataEntity>[] is M) {
      return data.map<AddressDataEntity>((Map<String, dynamic> e) =>
          AddressDataEntity.fromJson(e)).toList() as M;
    }
    if (<AddressDataData>[] is M) {
      return data.map<AddressDataData>((Map<String, dynamic> e) =>
          AddressDataData.fromJson(e)).toList() as M;
    }
    if (<AppVersionEntity>[] is M) {
      return data.map<AppVersionEntity>((Map<String, dynamic> e) =>
          AppVersionEntity.fromJson(e)).toList() as M;
    }
    if (<AppVersionData>[] is M) {
      return data.map<AppVersionData>((Map<String, dynamic> e) =>
          AppVersionData.fromJson(e)).toList() as M;
    }
    if (<BrandEntity>[] is M) {
      return data.map<BrandEntity>((Map<String, dynamic> e) =>
          BrandEntity.fromJson(e)).toList() as M;
    }
    if (<BrandData>[] is M) {
      return data.map<BrandData>((Map<String, dynamic> e) =>
          BrandData.fromJson(e)).toList() as M;
    }
    if (<CartBannersEntity>[] is M) {
      return data.map<CartBannersEntity>((Map<String, dynamic> e) =>
          CartBannersEntity.fromJson(e)).toList() as M;
    }
    if (<CartBannersData>[] is M) {
      return data.map<CartBannersData>((Map<String, dynamic> e) =>
          CartBannersData.fromJson(e)).toList() as M;
    }
    if (<CartDataExistEntity>[] is M) {
      return data.map<CartDataExistEntity>((Map<String, dynamic> e) =>
          CartDataExistEntity.fromJson(e)).toList() as M;
    }
    if (<CartDataExistData>[] is M) {
      return data.map<CartDataExistData>((Map<String, dynamic> e) =>
          CartDataExistData.fromJson(e)).toList() as M;
    }
    if (<CartProductsEntity>[] is M) {
      return data.map<CartProductsEntity>((Map<String, dynamic> e) =>
          CartProductsEntity.fromJson(e)).toList() as M;
    }
    if (<CartProductsData>[] is M) {
      return data.map<CartProductsData>((Map<String, dynamic> e) =>
          CartProductsData.fromJson(e)).toList() as M;
    }
    if (<CategoryEntity>[] is M) {
      return data.map<CategoryEntity>((Map<String, dynamic> e) =>
          CategoryEntity.fromJson(e)).toList() as M;
    }
    if (<CategoryData>[] is M) {
      return data.map<CategoryData>((Map<String, dynamic> e) =>
          CategoryData.fromJson(e)).toList() as M;
    }
    if (<CountryListEntity>[] is M) {
      return data.map<CountryListEntity>((Map<String, dynamic> e) =>
          CountryListEntity.fromJson(e)).toList() as M;
    }
    if (<CountryListData>[] is M) {
      return data.map<CountryListData>((Map<String, dynamic> e) =>
          CountryListData.fromJson(e)).toList() as M;
    }
    if (<OrderDetailsEntity>[] is M) {
      return data.map<OrderDetailsEntity>((Map<String, dynamic> e) =>
          OrderDetailsEntity.fromJson(e)).toList() as M;
    }
    if (<OrderDetailsData>[] is M) {
      return data.map<OrderDetailsData>((Map<String, dynamic> e) =>
          OrderDetailsData.fromJson(e)).toList() as M;
    }
    if (<OrderDetailsDataCartOrder>[] is M) {
      return data.map<OrderDetailsDataCartOrder>((Map<String, dynamic> e) =>
          OrderDetailsDataCartOrder.fromJson(e)).toList() as M;
    }
    if (<OrderDetailsDataCartStock>[] is M) {
      return data.map<OrderDetailsDataCartStock>((Map<String, dynamic> e) =>
          OrderDetailsDataCartStock.fromJson(e)).toList() as M;
    }
    if (<OrderDetailsDataCartProduct>[] is M) {
      return data.map<OrderDetailsDataCartProduct>((Map<String, dynamic> e) =>
          OrderDetailsDataCartProduct.fromJson(e)).toList() as M;
    }
    if (<OrderDetailsDataCartReturnRequests>[] is M) {
      return data.map<OrderDetailsDataCartReturnRequests>((
          Map<String, dynamic> e) =>
          OrderDetailsDataCartReturnRequests.fromJson(e)).toList() as M;
    }
    if (<OrderEntity>[] is M) {
      return data.map<OrderEntity>((Map<String, dynamic> e) =>
          OrderEntity.fromJson(e)).toList() as M;
    }
    if (<OrderData>[] is M) {
      return data.map<OrderData>((Map<String, dynamic> e) =>
          OrderData.fromJson(e)).toList() as M;
    }
    if (<OrderItemByIDEntity>[] is M) {
      return data.map<OrderItemByIDEntity>((Map<String, dynamic> e) =>
          OrderItemByIDEntity.fromJson(e)).toList() as M;
    }
    if (<OrderItemByIDData>[] is M) {
      return data.map<OrderItemByIDData>((Map<String, dynamic> e) =>
          OrderItemByIDData.fromJson(e)).toList() as M;
    }
    if (<OrderItemByIDDataCartOrder>[] is M) {
      return data.map<OrderItemByIDDataCartOrder>((Map<String, dynamic> e) =>
          OrderItemByIDDataCartOrder.fromJson(e)).toList() as M;
    }
    if (<OrderItemByIDDataCartStock>[] is M) {
      return data.map<OrderItemByIDDataCartStock>((Map<String, dynamic> e) =>
          OrderItemByIDDataCartStock.fromJson(e)).toList() as M;
    }
    if (<OrderItemByIDDataCartProduct>[] is M) {
      return data.map<OrderItemByIDDataCartProduct>((Map<String, dynamic> e) =>
          OrderItemByIDDataCartProduct.fromJson(e)).toList() as M;
    }
    if (<ProductByCategoryEntity>[] is M) {
      return data.map<ProductByCategoryEntity>((Map<String, dynamic> e) =>
          ProductByCategoryEntity.fromJson(e)).toList() as M;
    }
    if (<ProductByCategoryData>[] is M) {
      return data.map<ProductByCategoryData>((Map<String, dynamic> e) =>
          ProductByCategoryData.fromJson(e)).toList() as M;
    }
    if (<ProductByCategoryDataCategory>[] is M) {
      return data.map<ProductByCategoryDataCategory>((Map<String, dynamic> e) =>
          ProductByCategoryDataCategory.fromJson(e)).toList() as M;
    }
    if (<ProductByCategoryDataData>[] is M) {
      return data.map<ProductByCategoryDataData>((Map<String, dynamic> e) =>
          ProductByCategoryDataData.fromJson(e)).toList() as M;
    }
    if (<ProductCountEntity>[] is M) {
      return data.map<ProductCountEntity>((Map<String, dynamic> e) =>
          ProductCountEntity.fromJson(e)).toList() as M;
    }
    if (<ProductCountData>[] is M) {
      return data.map<ProductCountData>((Map<String, dynamic> e) =>
          ProductCountData.fromJson(e)).toList() as M;
    }
    if (<ProductStockEntity>[] is M) {
      return data.map<ProductStockEntity>((Map<String, dynamic> e) =>
          ProductStockEntity.fromJson(e)).toList() as M;
    }
    if (<ProductStockData>[] is M) {
      return data.map<ProductStockData>((Map<String, dynamic> e) =>
          ProductStockData.fromJson(e)).toList() as M;
    }
    if (<ProductsEntity>[] is M) {
      return data.map<ProductsEntity>((Map<String, dynamic> e) =>
          ProductsEntity.fromJson(e)).toList() as M;
    }
    if (<ProductsData>[] is M) {
      return data.map<ProductsData>((Map<String, dynamic> e) =>
          ProductsData.fromJson(e)).toList() as M;
    }
    if (<ProfileDataEntity>[] is M) {
      return data.map<ProfileDataEntity>((Map<String, dynamic> e) =>
          ProfileDataEntity.fromJson(e)).toList() as M;
    }
    if (<ProfileDataData>[] is M) {
      return data.map<ProfileDataData>((Map<String, dynamic> e) =>
          ProfileDataData.fromJson(e)).toList() as M;
    }
    if (<ReturnPolicyEntity>[] is M) {
      return data.map<ReturnPolicyEntity>((Map<String, dynamic> e) =>
          ReturnPolicyEntity.fromJson(e)).toList() as M;
    }
    if (<ReturnPolicyData>[] is M) {
      return data.map<ReturnPolicyData>((Map<String, dynamic> e) =>
          ReturnPolicyData.fromJson(e)).toList() as M;
    }
    if (<ReturnRequestEntity>[] is M) {
      return data.map<ReturnRequestEntity>((Map<String, dynamic> e) =>
          ReturnRequestEntity.fromJson(e)).toList() as M;
    }
    if (<ReturnRequestData>[] is M) {
      return data.map<ReturnRequestData>((Map<String, dynamic> e) =>
          ReturnRequestData.fromJson(e)).toList() as M;
    }
    if (<SearchedProductsEntity>[] is M) {
      return data.map<SearchedProductsEntity>((Map<String, dynamic> e) =>
          SearchedProductsEntity.fromJson(e)).toList() as M;
    }
    if (<SearchedProductsData>[] is M) {
      return data.map<SearchedProductsData>((Map<String, dynamic> e) =>
          SearchedProductsData.fromJson(e)).toList() as M;
    }
    if (<StateListEntity>[] is M) {
      return data.map<StateListEntity>((Map<String, dynamic> e) =>
          StateListEntity.fromJson(e)).toList() as M;
    }
    if (<StateListData>[] is M) {
      return data.map<StateListData>((Map<String, dynamic> e) =>
          StateListData.fromJson(e)).toList() as M;
    }
    if (<SubCategoryEntity>[] is M) {
      return data.map<SubCategoryEntity>((Map<String, dynamic> e) =>
          SubCategoryEntity.fromJson(e)).toList() as M;
    }
    if (<SubCategoryData>[] is M) {
      return data.map<SubCategoryData>((Map<String, dynamic> e) =>
          SubCategoryData.fromJson(e)).toList() as M;
    }
    if (<TokenDataEntity>[] is M) {
      return data.map<TokenDataEntity>((Map<String, dynamic> e) =>
          TokenDataEntity.fromJson(e)).toList() as M;
    }
    if (<UserAddressDataEntity>[] is M) {
      return data.map<UserAddressDataEntity>((Map<String, dynamic> e) =>
          UserAddressDataEntity.fromJson(e)).toList() as M;
    }
    if (<UserAddressDataData>[] is M) {
      return data.map<UserAddressDataData>((Map<String, dynamic> e) =>
          UserAddressDataData.fromJson(e)).toList() as M;
    }
    if (<UserAddressEntity>[] is M) {
      return data.map<UserAddressEntity>((Map<String, dynamic> e) =>
          UserAddressEntity.fromJson(e)).toList() as M;
    }
    if (<UserAddressData>[] is M) {
      return data.map<UserAddressData>((Map<String, dynamic> e) =>
          UserAddressData.fromJson(e)).toList() as M;
    }
    if (<UserEntity>[] is M) {
      return data.map<UserEntity>((Map<String, dynamic> e) =>
          UserEntity.fromJson(e)).toList() as M;
    }
    if (<UserData>[] is M) {
      return data.map<UserData>((Map<String, dynamic> e) =>
          UserData.fromJson(e)).toList() as M;
    }
    if (<WalletBalanceEntity>[] is M) {
      return data.map<WalletBalanceEntity>((Map<String, dynamic> e) =>
          WalletBalanceEntity.fromJson(e)).toList() as M;
    }
    if (<WalletBalanceData>[] is M) {
      return data.map<WalletBalanceData>((Map<String, dynamic> e) =>
          WalletBalanceData.fromJson(e)).toList() as M;
    }
    if (<WalletPointsEntity>[] is M) {
      return data.map<WalletPointsEntity>((Map<String, dynamic> e) =>
          WalletPointsEntity.fromJson(e)).toList() as M;
    }
    if (<WalletPointsData>[] is M) {
      return data.map<WalletPointsData>((Map<String, dynamic> e) =>
          WalletPointsData.fromJson(e)).toList() as M;
    }
    if (<WalletTransactionEntity>[] is M) {
      return data.map<WalletTransactionEntity>((Map<String, dynamic> e) =>
          WalletTransactionEntity.fromJson(e)).toList() as M;
    }
    if (<WalletTransactionData>[] is M) {
      return data.map<WalletTransactionData>((Map<String, dynamic> e) =>
          WalletTransactionData.fromJson(e)).toList() as M;
    }
    if (<WishListProductEntity>[] is M) {
      return data.map<WishListProductEntity>((Map<String, dynamic> e) =>
          WishListProductEntity.fromJson(e)).toList() as M;
    }
    if (<WishListProductData>[] is M) {
      return data.map<WishListProductData>((Map<String, dynamic> e) =>
          WishListProductData.fromJson(e)).toList() as M;
    }
    if (<WishlistcheckEntity>[] is M) {
      return data.map<WishlistcheckEntity>((Map<String, dynamic> e) =>
          WishlistcheckEntity.fromJson(e)).toList() as M;
    }
    if (<WishlistcheckData>[] is M) {
      return data.map<WishlistcheckData>((Map<String, dynamic> e) =>
          WishlistcheckData.fromJson(e)).toList() as M;
    }

    debugPrint("$M not found");

    return null;
  }

  static M? fromJsonAsT<M>(dynamic json) {
    if (json is M) {
      return json;
    }
    if (json is List) {
      return _getListChildType<M>(
          json.map((dynamic e) => e as Map<String, dynamic>).toList());
    } else {
      return jsonConvert.convert<M>(json);
    }
  }
}

class JsonConvertClassCollection {
  Map<String, JsonConvertFunction> convertFuncMap = {
    (AddressDataEntity).toString(): AddressDataEntity.fromJson,
    (AddressDataData).toString(): AddressDataData.fromJson,
    (AppVersionEntity).toString(): AppVersionEntity.fromJson,
    (AppVersionData).toString(): AppVersionData.fromJson,
    (BrandEntity).toString(): BrandEntity.fromJson,
    (BrandData).toString(): BrandData.fromJson,
    (CartBannersEntity).toString(): CartBannersEntity.fromJson,
    (CartBannersData).toString(): CartBannersData.fromJson,
    (CartDataExistEntity).toString(): CartDataExistEntity.fromJson,
    (CartDataExistData).toString(): CartDataExistData.fromJson,
    (CartProductsEntity).toString(): CartProductsEntity.fromJson,
    (CartProductsData).toString(): CartProductsData.fromJson,
    (CategoryEntity).toString(): CategoryEntity.fromJson,
    (CategoryData).toString(): CategoryData.fromJson,
    (CountryListEntity).toString(): CountryListEntity.fromJson,
    (CountryListData).toString(): CountryListData.fromJson,
    (OrderDetailsEntity).toString(): OrderDetailsEntity.fromJson,
    (OrderDetailsData).toString(): OrderDetailsData.fromJson,
    (OrderDetailsDataCartOrder).toString(): OrderDetailsDataCartOrder.fromJson,
    (OrderDetailsDataCartStock).toString(): OrderDetailsDataCartStock.fromJson,
    (OrderDetailsDataCartProduct).toString(): OrderDetailsDataCartProduct
        .fromJson,
    (OrderDetailsDataCartReturnRequests)
        .toString(): OrderDetailsDataCartReturnRequests.fromJson,
    (OrderEntity).toString(): OrderEntity.fromJson,
    (OrderData).toString(): OrderData.fromJson,
    (OrderItemByIDEntity).toString(): OrderItemByIDEntity.fromJson,
    (OrderItemByIDData).toString(): OrderItemByIDData.fromJson,
    (OrderItemByIDDataCartOrder).toString(): OrderItemByIDDataCartOrder
        .fromJson,
    (OrderItemByIDDataCartStock).toString(): OrderItemByIDDataCartStock
        .fromJson,
    (OrderItemByIDDataCartProduct).toString(): OrderItemByIDDataCartProduct
        .fromJson,
    (ProductByCategoryEntity).toString(): ProductByCategoryEntity.fromJson,
    (ProductByCategoryData).toString(): ProductByCategoryData.fromJson,
    (ProductByCategoryDataCategory).toString(): ProductByCategoryDataCategory
        .fromJson,
    (ProductByCategoryDataData).toString(): ProductByCategoryDataData.fromJson,
    (ProductCountEntity).toString(): ProductCountEntity.fromJson,
    (ProductCountData).toString(): ProductCountData.fromJson,
    (ProductStockEntity).toString(): ProductStockEntity.fromJson,
    (ProductStockData).toString(): ProductStockData.fromJson,
    (ProductsEntity).toString(): ProductsEntity.fromJson,
    (ProductsData).toString(): ProductsData.fromJson,
    (ProfileDataEntity).toString(): ProfileDataEntity.fromJson,
    (ProfileDataData).toString(): ProfileDataData.fromJson,
    (ReturnPolicyEntity).toString(): ReturnPolicyEntity.fromJson,
    (ReturnPolicyData).toString(): ReturnPolicyData.fromJson,
    (ReturnRequestEntity).toString(): ReturnRequestEntity.fromJson,
    (ReturnRequestData).toString(): ReturnRequestData.fromJson,
    (SearchedProductsEntity).toString(): SearchedProductsEntity.fromJson,
    (SearchedProductsData).toString(): SearchedProductsData.fromJson,
    (StateListEntity).toString(): StateListEntity.fromJson,
    (StateListData).toString(): StateListData.fromJson,
    (SubCategoryEntity).toString(): SubCategoryEntity.fromJson,
    (SubCategoryData).toString(): SubCategoryData.fromJson,
    (TokenDataEntity).toString(): TokenDataEntity.fromJson,
    (UserAddressDataEntity).toString(): UserAddressDataEntity.fromJson,
    (UserAddressDataData).toString(): UserAddressDataData.fromJson,
    (UserAddressEntity).toString(): UserAddressEntity.fromJson,
    (UserAddressData).toString(): UserAddressData.fromJson,
    (UserEntity).toString(): UserEntity.fromJson,
    (UserData).toString(): UserData.fromJson,
    (WalletBalanceEntity).toString(): WalletBalanceEntity.fromJson,
    (WalletBalanceData).toString(): WalletBalanceData.fromJson,
    (WalletPointsEntity).toString(): WalletPointsEntity.fromJson,
    (WalletPointsData).toString(): WalletPointsData.fromJson,
    (WalletTransactionEntity).toString(): WalletTransactionEntity.fromJson,
    (WalletTransactionData).toString(): WalletTransactionData.fromJson,
    (WishListProductEntity).toString(): WishListProductEntity.fromJson,
    (WishListProductData).toString(): WishListProductData.fromJson,
    (WishlistcheckEntity).toString(): WishlistcheckEntity.fromJson,
    (WishlistcheckData).toString(): WishlistcheckData.fromJson,
  };

  bool containsKey(String type) {
    return convertFuncMap.containsKey(type);
  }

  JsonConvertFunction? operator [](String key) {
    return convertFuncMap[key];
  }
}